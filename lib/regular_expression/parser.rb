#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.2
# from Racc grammar file "".
#

require 'racc/parser.rb'
module RegularExpression
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 114)

  def parse(str)
    @tokens = Lexer.new(str).tokens
    do_parse
  end

  def next_token
    @tokens.shift
  end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    30,    33,    43,    34,    35,    49,    56,    33,    36,    34,
    35,    50,    20,     3,    36,     9,    10,    41,    12,    43,
    13,    14,    15,    16,    17,    18,    19,     9,    10,    22,
    12,    37,    13,    14,    15,    16,    17,    18,    19,     9,
    10,    39,    12,    45,    13,    14,    15,    16,    17,    18,
    19,     9,    10,    47,    12,    43,    13,    14,    15,    16,
    17,    18,    19,     9,    10,    43,    12,    53,    13,    14,
    15,    16,    17,    18,    19,    33,    54,    34,    35,    57,
    58,    26,    36,    27,    28,    29,    26,   nil,    27,    28,
    29 ]

racc_action_check = [
    12,    30,    49,    30,    30,    40,    49,    12,    30,    12,
    12,    40,     1,     0,    12,     0,     0,    26,     0,    26,
     0,     0,     0,     0,     0,     0,     0,     3,     3,     5,
     3,    20,     3,     3,     3,     3,     3,     3,     3,     6,
     6,    24,     6,    31,     6,     6,     6,     6,     6,     6,
     6,    10,    10,    34,    10,    41,    10,    10,    10,    10,
    10,    10,    10,    22,    22,    43,    22,    44,    22,    22,
    22,    22,    22,    22,    22,    32,    47,    32,    32,    51,
    55,    11,    32,    11,    11,    11,    39,   nil,    39,    39,
    39 ]

racc_action_pointer = [
    11,    12,   nil,    23,   nil,    26,    35,   nil,   nil,   nil,
    47,    64,    -2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    31,   nil,    59,   nil,    35,   nil,     5,   nil,   nil,   nil,
    -8,    35,    66,   nil,    40,   nil,   nil,   nil,   nil,    69,
    -7,    41,   nil,    51,    59,   nil,   nil,    65,   nil,   -12,
   nil,    61,   nil,   nil,   nil,    62,   nil,   nil,   nil ]

racc_action_default = [
    -2,   -42,    -1,   -42,    -4,    -6,    -8,    -9,   -10,   -11,
   -42,   -15,   -42,   -18,   -19,   -20,   -21,   -22,   -23,   -24,
   -42,    -3,   -42,    -7,   -42,   -14,   -42,   -36,   -37,   -38,
   -42,   -42,   -26,   -27,   -29,   -30,   -31,    59,    -5,   -13,
   -42,   -42,   -39,   -41,   -42,   -17,   -25,   -42,   -12,   -42,
   -35,   -42,   -40,   -16,   -28,   -42,   -33,   -34,   -32 ]

racc_goto_table = [
    25,    40,    31,     4,     1,     2,    21,    23,    52,   nil,
   nil,   nil,   nil,    24,   nil,   nil,    51,   nil,   nil,   nil,
    44,   nil,    46,   nil,    55,    38,   nil,   nil,    48 ]

racc_goto_check = [
     8,    12,    10,     3,     1,     2,     3,     4,    13,   nil,
   nil,   nil,   nil,     3,   nil,   nil,    12,   nil,   nil,   nil,
    10,   nil,    10,   nil,    12,     3,   nil,   nil,     8 ]

racc_goto_pointer = [
   nil,     4,     5,     3,     1,   nil,   nil,   nil,   -11,   nil,
   -10,   nil,   -25,   -35 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,     6,     7,     8,   nil,    11,
   nil,    32,   nil,    42 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 23, :_reduce_1,
  0, 23, :_reduce_2,
  2, 24, :_reduce_3,
  1, 24, :_reduce_4,
  3, 25, :_reduce_5,
  1, 25, :_reduce_6,
  2, 26, :_reduce_7,
  1, 26, :_reduce_8,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_11,
  4, 28, :_reduce_12,
  3, 28, :_reduce_13,
  2, 29, :_reduce_14,
  1, 29, :_reduce_15,
  4, 31, :_reduce_16,
  3, 31, :_reduce_17,
  1, 31, :_reduce_18,
  1, 31, :_reduce_19,
  1, 31, :_reduce_20,
  1, 31, :_reduce_21,
  1, 31, :_reduce_22,
  1, 31, :_reduce_23,
  1, 31, :_reduce_24,
  2, 32, :_reduce_25,
  1, 32, :_reduce_26,
  1, 33, :_reduce_27,
  3, 33, :_reduce_28,
  1, 33, :_reduce_29,
  1, 33, :_reduce_30,
  1, 33, :_reduce_31,
  5, 30, :_reduce_32,
  4, 30, :_reduce_33,
  4, 30, :_reduce_34,
  3, 30, :_reduce_35,
  1, 30, :_reduce_36,
  1, 30, :_reduce_37,
  1, 30, :_reduce_38,
  1, 34, :_reduce_39,
  2, 35, :_reduce_40,
  1, 35, :_reduce_41 ]

racc_reduce_n = 42

racc_shift_n = 59

racc_token_table = {
  false => 0,
  :error => 1,
  :CARET => 2,
  :PIPE => 3,
  :ANCHOR => 4,
  :LPAREN => 5,
  :RPAREN => 6,
  :LBRACKET => 7,
  :RBRACKET => 8,
  :CHAR_CLASS => 9,
  :CHAR_TYPE => 10,
  :CHAR => 11,
  :COMMA => 12,
  :DASH => 13,
  :DIGIT => 14,
  :PERIOD => 15,
  :INTEGER => 16,
  :LBRACE => 17,
  :RBRACE => 18,
  :STAR => 19,
  :PLUS => 20,
  :QMARK => 21 }

racc_nt_base = 22

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "CARET",
  "PIPE",
  "ANCHOR",
  "LPAREN",
  "RPAREN",
  "LBRACKET",
  "RBRACKET",
  "CHAR_CLASS",
  "CHAR_TYPE",
  "CHAR",
  "COMMA",
  "DASH",
  "DIGIT",
  "PERIOD",
  "INTEGER",
  "LBRACE",
  "RBRACE",
  "STAR",
  "PLUS",
  "QMARK",
  "$start",
  "target",
  "root",
  "expression",
  "subexpression",
  "item",
  "group",
  "match",
  "quantifier",
  "match_item",
  "character_group_items",
  "character_group_item",
  "integer",
  "digits" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 6)
  def _reduce_1(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 8)
  def _reduce_2(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 12)
  def _reduce_3(val, _values, result)
     result = AST::Root.new(val[1], at_start: true)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 14)
  def _reduce_4(val, _values, result)
     result = AST::Root.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 18)
  def _reduce_5(val, _values, result)
     result = [AST::Expression.new(val[0])] + val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_6(val, _values, result)
     result = [AST::Expression.new(val[0])]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 24)
  def _reduce_7(val, _values, result)
     result = [val[0]] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 26)
  def _reduce_8(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

# reduce 9 omitted

# reduce 10 omitted

module_eval(<<'.,.,', 'parser.y', 32)
  def _reduce_11(val, _values, result)
     result = AST::Anchor.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_12(val, _values, result)
     result = AST::Group.new(val[1], quantifier: val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 38)
  def _reduce_13(val, _values, result)
     result = AST::Group.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_14(val, _values, result)
     result = AST::Match.new(val[0], quantifier: val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 44)
  def _reduce_15(val, _values, result)
     result = AST::Match.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 48)
  def _reduce_16(val, _values, result)
     result = AST::CharacterGroup.new(val[2], invert: true)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 50)
  def _reduce_17(val, _values, result)
     result = AST::CharacterGroup.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 52)
  def _reduce_18(val, _values, result)
     result = AST::CharacterClass.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_19(val, _values, result)
     result = AST::CharacterType.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 56)
  def _reduce_20(val, _values, result)
     result = AST::Character.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 58)
  def _reduce_21(val, _values, result)
     result = AST::Character.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 60)
  def _reduce_22(val, _values, result)
     result = AST::Character.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 62)
  def _reduce_23(val, _values, result)
     result = AST::Character.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 64)
  def _reduce_24(val, _values, result)
     result = AST::Period.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 68)
  def _reduce_25(val, _values, result)
     result = [val[0]] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 70)
  def _reduce_26(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 74)
  def _reduce_27(val, _values, result)
     result = AST::CharacterClass.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 76)
  def _reduce_28(val, _values, result)
     result = AST::CharacterRange.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 78)
  def _reduce_29(val, _values, result)
     result = AST::Character.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 80)
  def _reduce_30(val, _values, result)
     result = AST::Character.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 82)
  def _reduce_31(val, _values, result)
     result = AST::Character.new(val[0].to_s)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 86)
  def _reduce_32(val, _values, result)
     result = AST::Quantifier::Range.new(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 88)
  def _reduce_33(val, _values, result)
     result = AST::Quantifier::AtLeast.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 90)
  def _reduce_34(val, _values, result)
     result = AST::Quantifier::Range.new(0, val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 92)
  def _reduce_35(val, _values, result)
     result = AST::Quantifier::Exact.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 94)
  def _reduce_36(val, _values, result)
     result = AST::Quantifier::ZeroOrMore.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 96)
  def _reduce_37(val, _values, result)
     result = AST::Quantifier::OneOrMore.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 98)
  def _reduce_38(val, _values, result)
     result = AST::Quantifier::Optional.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 102)
  def _reduce_39(val, _values, result)
     result = val[0].to_i
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 106)
  def _reduce_40(val, _values, result)
     result = val[0] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 108)
  def _reduce_41(val, _values, result)
     result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module RegularExpression
