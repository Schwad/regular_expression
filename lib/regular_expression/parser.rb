#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.2
# from Racc grammar file "".
#

require 'racc/parser.rb'
module RegularExpression
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 126)

  def parse(str)
    @tokens = Lexer.new(str).tokens
    do_parse
  end

  def next_token
    @tokens.shift
  end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     3,    61,     9,    10,    62,    11,    13,    24,    14,    15,
    16,    17,    18,    19,    21,    22,    23,    35,    26,    31,
    38,    32,    33,    34,    44,    38,    39,    22,    23,    49,
    51,    39,    22,    23,     9,    10,    46,    11,    13,    47,
    14,    15,    16,    17,    18,    19,    21,    22,    23,     9,
    10,    53,    11,    13,    55,    14,    15,    16,    17,    18,
    19,    21,    22,    23,     9,    10,    56,    11,    13,    58,
    14,    15,    16,    17,    18,    19,    21,    22,    23,     9,
    10,    51,    11,    13,    51,    14,    15,    16,    17,    18,
    19,    21,    22,    23,     9,    10,    65,    11,    13,    66,
    14,    15,    16,    17,    18,    19,    21,    22,    23,    38,
    31,    69,    32,    33,    34,    39,    22,    23,    31,    70,
    32,    33,    34,    21,    22,    23,    21,    22,    23,    21,
    22,    23,    51,   nil,    68 ]

racc_action_check = [
     0,    48,     0,     0,    48,     0,     0,     1,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    13,     5,    12,
    35,    12,    12,    12,    24,    13,    35,    35,    35,    31,
    31,    13,    13,    13,     3,     3,    28,     3,     3,    29,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     6,
     6,    36,     6,     6,    39,     6,     6,     6,     6,     6,
     6,     6,     6,     6,    10,    10,    41,    10,    10,    43,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    11,
    11,    49,    11,    11,    51,    11,    11,    11,    11,    11,
    11,    11,    11,    11,    26,    26,    52,    26,    26,    55,
    26,    26,    26,    26,    26,    26,    26,    26,    26,    37,
    46,    63,    46,    46,    46,    37,    37,    37,    47,    67,
    47,    47,    47,    18,    18,    18,    19,    19,    19,    42,
    42,    42,    61,   nil,    61 ]

racc_action_pointer = [
    -2,     7,   nil,    30,   nil,    15,    45,   nil,   nil,   nil,
    60,    75,     0,    15,   nil,   nil,   nil,   nil,   107,   110,
   nil,   nil,   nil,   nil,    24,   nil,    90,   nil,    30,    33,
   nil,    12,   nil,   nil,   nil,    10,    42,    99,   nil,    42,
   nil,    60,   113,    63,   nil,   nil,    91,    99,   -16,    63,
   nil,    66,    87,   nil,   nil,    83,   nil,   nil,   nil,   nil,
   nil,   114,   nil,    91,   nil,   nil,   nil,    99,   nil,   nil,
   nil ]

racc_action_default = [
    -2,   -47,    -1,   -47,    -4,    -6,    -8,    -9,   -10,   -11,
   -47,   -47,   -17,   -47,   -20,   -21,   -22,   -23,   -47,   -47,
   -26,   -34,   -35,   -36,   -47,    -3,   -47,    -7,   -47,   -47,
   -16,   -47,   -41,   -42,   -43,   -47,   -47,   -28,   -29,   -34,
   -31,   -47,   -33,   -47,    71,    -5,   -13,   -15,   -47,   -47,
   -44,   -46,   -47,   -19,   -27,   -47,   -24,   -32,   -25,   -12,
   -14,   -47,   -40,   -47,   -45,   -18,   -30,   -47,   -38,   -39,
   -37 ]

racc_goto_table = [
    30,    48,     4,    40,     1,    25,    41,    43,    42,    42,
     2,    27,    28,    29,    36,    64,   nil,   nil,   nil,    63,
   nil,   nil,   nil,   nil,   nil,    40,   nil,    40,    45,   nil,
    57,    67,    42,   nil,    59,    60,    52,   nil,    54 ]

racc_goto_check = [
     8,    14,     3,    12,     1,     3,    11,    11,    12,    12,
     2,     4,     3,     3,    10,    15,   nil,   nil,   nil,    14,
   nil,   nil,   nil,   nil,   nil,    12,   nil,    12,     3,   nil,
    11,    14,    12,   nil,     8,     8,    10,   nil,    10 ]

racc_goto_pointer = [
   nil,     4,    10,     2,     5,   nil,   nil,   nil,   -12,   nil,
     1,   -12,   -10,   nil,   -30,   -36 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,     6,     7,     8,   nil,    12,
   nil,   nil,    20,    37,   nil,    50 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 25, :_reduce_1,
  0, 25, :_reduce_2,
  2, 26, :_reduce_3,
  1, 26, :_reduce_4,
  3, 27, :_reduce_5,
  1, 27, :_reduce_6,
  2, 28, :_reduce_7,
  1, 28, :_reduce_8,
  1, 29, :_reduce_none,
  1, 29, :_reduce_none,
  1, 29, :_reduce_11,
  4, 30, :_reduce_12,
  3, 30, :_reduce_13,
  4, 30, :_reduce_14,
  3, 30, :_reduce_15,
  2, 31, :_reduce_16,
  1, 31, :_reduce_17,
  4, 33, :_reduce_18,
  3, 33, :_reduce_19,
  1, 33, :_reduce_20,
  1, 33, :_reduce_21,
  1, 33, :_reduce_22,
  1, 33, :_reduce_23,
  3, 33, :_reduce_24,
  3, 33, :_reduce_25,
  1, 33, :_reduce_none,
  2, 34, :_reduce_27,
  1, 34, :_reduce_28,
  1, 37, :_reduce_29,
  3, 37, :_reduce_30,
  1, 37, :_reduce_none,
  2, 35, :_reduce_32,
  1, 35, :_reduce_33,
  1, 36, :_reduce_34,
  1, 36, :_reduce_35,
  1, 36, :_reduce_36,
  5, 32, :_reduce_37,
  4, 32, :_reduce_38,
  4, 32, :_reduce_39,
  3, 32, :_reduce_40,
  1, 32, :_reduce_41,
  1, 32, :_reduce_42,
  1, 32, :_reduce_43,
  1, 38, :_reduce_44,
  2, 39, :_reduce_45,
  1, 39, :_reduce_46 ]

racc_reduce_n = 47

racc_shift_n = 71

racc_token_table = {
  false => 0,
  :error => 1,
  :CARET => 2,
  :PIPE => 3,
  :ANCHOR => 4,
  :LPAREN => 5,
  :RPAREN => 6,
  :NO_CAPTURE => 7,
  :LBRACKET => 8,
  :RBRACKET => 9,
  :CHAR_CLASS => 10,
  :CHAR_TYPE => 11,
  :DASH => 12,
  :PERIOD => 13,
  :POSITIVE_LOOKAHEAD => 14,
  :NEGATIVE_LOOKAHEAD => 15,
  :CHAR => 16,
  :COMMA => 17,
  :DIGIT => 18,
  :LBRACE => 19,
  :RBRACE => 20,
  :STAR => 21,
  :PLUS => 22,
  :QMARK => 23 }

racc_nt_base = 24

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "CARET",
  "PIPE",
  "ANCHOR",
  "LPAREN",
  "RPAREN",
  "NO_CAPTURE",
  "LBRACKET",
  "RBRACKET",
  "CHAR_CLASS",
  "CHAR_TYPE",
  "DASH",
  "PERIOD",
  "POSITIVE_LOOKAHEAD",
  "NEGATIVE_LOOKAHEAD",
  "CHAR",
  "COMMA",
  "DIGIT",
  "LBRACE",
  "RBRACE",
  "STAR",
  "PLUS",
  "QMARK",
  "$start",
  "target",
  "root",
  "expression",
  "subexpression",
  "item",
  "group",
  "match",
  "quantifier",
  "match_item",
  "character_group_items",
  "assertion_items",
  "character",
  "character_group_item",
  "integer",
  "digits" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 6)
  def _reduce_1(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 8)
  def _reduce_2(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 12)
  def _reduce_3(val, _values, result)
     result = AST::Root.new(val[1], at_start: true)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 14)
  def _reduce_4(val, _values, result)
     result = AST::Root.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 18)
  def _reduce_5(val, _values, result)
     result = [AST::Expression.new(val[0])] + val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_6(val, _values, result)
     result = [AST::Expression.new(val[0])]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 24)
  def _reduce_7(val, _values, result)
     result = [val[0]] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 26)
  def _reduce_8(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

# reduce 9 omitted

# reduce 10 omitted

module_eval(<<'.,.,', 'parser.y', 32)
  def _reduce_11(val, _values, result)
     result = AST::Anchor.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_12(val, _values, result)
     result = AST::CaptureGroup.new(val[1], quantifier: val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 38)
  def _reduce_13(val, _values, result)
     result = AST::CaptureGroup.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 40)
  def _reduce_14(val, _values, result)
     result = AST::Group.new(val[1], quantifier: val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_15(val, _values, result)
     result = AST::Group.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 46)
  def _reduce_16(val, _values, result)
     result = AST::Match.new(val[0], quantifier: val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 48)
  def _reduce_17(val, _values, result)
     result = AST::Match.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 52)
  def _reduce_18(val, _values, result)
     result = AST::CharacterGroup.new(val[2], invert: true)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_19(val, _values, result)
     result = AST::CharacterGroup.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 56)
  def _reduce_20(val, _values, result)
     result = AST::CharacterClass.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 58)
  def _reduce_21(val, _values, result)
     result = AST::CharacterType.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 60)
  def _reduce_22(val, _values, result)
     result = AST::Character.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 62)
  def _reduce_23(val, _values, result)
     result = AST::Period.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 64)
  def _reduce_24(val, _values, result)
     result = AST::PositiveLookahead.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 66)
  def _reduce_25(val, _values, result)
     result = AST::NegativeLookahead.new(val[1])
    result
  end
.,.,

# reduce 26 omitted

module_eval(<<'.,.,', 'parser.y', 71)
  def _reduce_27(val, _values, result)
     result = [val[0]] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 73)
  def _reduce_28(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 77)
  def _reduce_29(val, _values, result)
     result = AST::CharacterClass.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 79)
  def _reduce_30(val, _values, result)
     result = AST::CharacterRange.new(val[0], val[2])
    result
  end
.,.,

# reduce 31 omitted

module_eval(<<'.,.,', 'parser.y', 84)
  def _reduce_32(val, _values, result)
     result = [val[0]] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 86)
  def _reduce_33(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 90)
  def _reduce_34(val, _values, result)
     result = AST::Character.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 92)
  def _reduce_35(val, _values, result)
     result = AST::Character.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 94)
  def _reduce_36(val, _values, result)
     result = AST::Character.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 98)
  def _reduce_37(val, _values, result)
     result = AST::Quantifier::Range.new(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 100)
  def _reduce_38(val, _values, result)
     result = AST::Quantifier::AtLeast.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 102)
  def _reduce_39(val, _values, result)
     result = AST::Quantifier::Range.new(0, val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 104)
  def _reduce_40(val, _values, result)
     result = AST::Quantifier::Exact.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 106)
  def _reduce_41(val, _values, result)
     result = AST::Quantifier::ZeroOrMore.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 108)
  def _reduce_42(val, _values, result)
     result = AST::Quantifier::OneOrMore.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 110)
  def _reduce_43(val, _values, result)
     result = AST::Quantifier::Optional.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 114)
  def _reduce_44(val, _values, result)
     result = val[0].to_i
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 118)
  def _reduce_45(val, _values, result)
     result = val[0] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 120)
  def _reduce_46(val, _values, result)
     result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module RegularExpression
